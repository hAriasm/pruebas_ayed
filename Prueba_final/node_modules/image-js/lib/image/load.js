'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadImage = loadImage;

var _Image = require('./Image');

var _Image2 = _interopRequireDefault(_Image);

var _Stack = require('../stack/Stack');

var _Stack2 = _interopRequireDefault(_Stack);

var _environment = require('./environment');

var _fastPng = require('fast-png');

var _fastJpeg = require('fast-jpeg');

var _tiff = require('tiff');

var _imageType = require('image-type');

var _imageType2 = _interopRequireDefault(_imageType);

var _base = require('../util/base64');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDataURL = /^data:[a-z]+\/([a-z]+);base64,/;

function loadImage(image, options) {
    if (typeof image === 'string') {
        return loadURL(image, options);
    } else if (image instanceof ArrayBuffer) {
        return Promise.resolve(loadBinary(new Uint8Array(image)));
    } else if (image.buffer) {
        return Promise.resolve(loadBinary(image));
    } else {
        throw new Error('argument to "load" must be a string or buffer.');
    }
}

function loadBinary(image, base64Url) {
    var type = (0, _imageType2.default)(image);
    if (type) {
        switch (type.mime) {
            case 'image/png':
                return loadPNG(image);
            case 'image/jpeg':
                {
                    var decoded = (0, _fastJpeg.decode)(image);
                    var meta = void 0;
                    if (decoded.exif) {
                        meta = getMetadata(decoded.exif);
                    }
                    return loadGeneric(getBase64('image/jpeg'), { meta });
                }
            case 'image/tiff':
                return loadTIFF(image);
            default:
                return loadGeneric(getBase64(type.mime));
        }
    }
    return loadGeneric(getBase64('application/octet-stream'));
    function getBase64(type) {
        if (base64Url) {
            return base64Url;
        } else {
            return (0, _base.toBase64URL)(image, type);
        }
    }
}

function loadURL(url, options) {
    var dataURL = url.slice(0, 64).match(isDataURL);
    var binaryDataP = void 0;
    if (dataURL) {
        binaryDataP = Promise.resolve((0, _base.decode)(url.slice(dataURL[0].length)));
    } else {
        binaryDataP = (0, _environment.fetchBinary)(url, options);
    }
    return binaryDataP.then(binaryData => {
        var uint8 = new Uint8Array(binaryData);
        return loadBinary(uint8, dataURL ? url : undefined);
    });
}

function loadPNG(data) {
    var png = (0, _fastPng.decode)(data);
    var bitDepth = png.bitDepth;
    var bitmap = png.data;
    if (bitDepth === 8) {
        bitmap = new Uint8ClampedArray(png.data.buffer, png.data.byteOffset, png.data.byteLength);
    }

    var type = png.colourType;
    var components = void 0;
    var alpha = 0;
    switch (type) {
        case 0:
            components = 1;break;
        case 2:
            components = 3;break;
        case 4:
            components = 1;alpha = 1;break;
        case 6:
            components = 3;alpha = 1;break;
        default:
            throw new Error(`Unexpected colourType: ${type}`);
    }

    return new _Image2.default(png.width, png.height, bitmap, { components, alpha, bitDepth });
}

function loadTIFF(data) {
    var result = (0, _tiff.decode)(data);
    if (result.length === 1) {
        return getImageFromIFD(result[0]);
    } else {
        return new _Stack2.default(result.map(getImageFromIFD));
    }
}

function getMetadata(image) {
    var metadata = {
        tiff: image
    };
    if (image.exif) {
        metadata.exif = image.exif;
    }
    if (image.gps) {
        metadata.gps = image.gps;
    }
    return metadata;
}

function getImageFromIFD(image) {
    return new _Image2.default(image.width, image.height, image.data, {
        components: 1,
        alpha: 0,
        colorModel: null,
        bitDepth: image.bitsPerSample.length ? image.bitsPerSample[0] : image.bitsPerSample,
        meta: getMetadata(image)
    });
}

function loadGeneric(url, options) {
    options = options || {};
    return new Promise(function (resolve, reject) {
        var image = new _environment.DOMImage();
        image.onload = function () {
            var w = image.width;
            var h = image.height;
            var canvas = new _environment.Canvas(w, h);
            var ctx = canvas.getContext('2d');
            ctx.drawImage(image, 0, 0, w, h);
            var data = ctx.getImageData(0, 0, w, h).data;
            resolve(new _Image2.default(w, h, data, options));
        };
        image.onerror = function () {
            reject(new Error('Could not load ' + url));
        };
        image.src = url;
    });
}