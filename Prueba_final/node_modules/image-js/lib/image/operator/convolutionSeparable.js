'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = convolutionSeparable;

var _mlConvolution = require('ml-convolution');

function convolutionSeparable(data, separatedKernel, width, height) {
    var result = new Array(data.length);
    var tmp = void 0,
        conv = void 0,
        offset = void 0,
        kernel = void 0;

    kernel = separatedKernel[1];
    offset = (kernel.length - 1) / 2;
    conv = new Array(width + kernel.length - 1);
    tmp = new Array(width);
    for (var y = 0; y < height; y++) {
        for (var x = 0; x < width; x++) {
            tmp[x] = data[y * width + x];
        }
        (0, _mlConvolution.directConvolution)(tmp, kernel, conv);
        for (var _x = 0; _x < width; _x++) {
            result[y * width + _x] = conv[offset + _x];
        }
    }

    kernel = separatedKernel[0];
    offset = (kernel.length - 1) / 2;
    conv = new Array(height + kernel.length - 1);
    tmp = new Array(height);
    for (var _x2 = 0; _x2 < width; _x2++) {
        for (var _y = 0; _y < height; _y++) {
            tmp[_y] = result[_y * width + _x2];
        }
        (0, _mlConvolution.directConvolution)(tmp, kernel, conv);
        for (var _y2 = 0; _y2 < height; _y2++) {
            result[_y2 * width + _x2] = conv[offset + _y2];
        }
    }
    return result;
}