'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fromMask = require('./creator/fromMask');

var _fromMask2 = _interopRequireDefault(_fromMask);

var _fromMaskConnectedComponentLabelingAlgorithm = require('./creator/fromMaskConnectedComponentLabelingAlgorithm');

var _fromMaskConnectedComponentLabelingAlgorithm2 = _interopRequireDefault(_fromMaskConnectedComponentLabelingAlgorithm);

var _fromMaxima = require('./creator/fromMaxima');

var _fromMaxima2 = _interopRequireDefault(_fromMaxima);

var _fromWaterShed = require('./creator/fromWaterShed');

var _fromWaterShed2 = _interopRequireDefault(_fromWaterShed);

var _fromPoints = require('./creator/fromPoints');

var _fromPoints2 = _interopRequireDefault(_fromPoints);

var _extend = require('extend');

var _extend2 = _interopRequireDefault(_extend);

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

var _RoiMap = require('./RoiMap');

var _RoiMap2 = _interopRequireDefault(_RoiMap);

var _RoiLayer = require('./RoiLayer');

var _RoiLayer2 = _interopRequireDefault(_RoiLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A manager of Regions of Interest. A RoiManager is related to a specific Image
 * and may contain multiple layers. Each layer is characterized by a label whose is
 * name by default 'default'
 * @class RoiManager
 * @param {Image} image
 * @param {object} [options]
 */
class RoiManager {
    constructor(image, options = {}) {
        this._image = image;
        this._options = options;
        if (!this._options.label) {
            this._options.label = 'default';
        }
        this._layers = {};
        this._painted = null;
    }

    // docs is in the corresponding file
    fromMaxima(options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        var roiMap = _fromMaxima2.default.call(this._image, options);
        this._layers[opt.label] = new _RoiLayer2.default(roiMap, opt);
    }

    // docs is in the corresponding file
    fromPoints(points, options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        var roiMap = _fromPoints2.default.call(this._image, points, options);
        this._layers[opt.label] = new _RoiLayer2.default(roiMap, opt);
        return this;
    }

    /**
     * @param {number[]} map
     * @param {object} [options]
     * @return {this}
     */
    putMap(map, options = {}) {
        var roiMap = new _RoiMap2.default(this._image, map);
        var opt = (0, _extend2.default)({}, this._options, options);
        this._layers[opt.label] = new _RoiLayer2.default(roiMap, opt);
        return this;
    }

    // docs is in the corresponding file
    fromWaterShed(options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        var roiMap = _fromWaterShed2.default.call(this._image, options);
        this._layers[opt.label] = new _RoiLayer2.default(roiMap, opt);
    }

    // docs is in the corresponding file
    fromMask(mask, options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        var roiMap = _fromMask2.default.call(this._image, mask, options);
        this._layers[opt.label] = new _RoiLayer2.default(roiMap, opt);
        return this;
    }

    fromMaskConnectedComponentLabelingAlgorithm(mask, options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        var roiMap = _fromMaskConnectedComponentLabelingAlgorithm2.default.call(this._image, mask, options);
        this._layers[opt.label] = new _RoiLayer2.default(roiMap, opt);
        return this;
    }

    /**
     *
     * @param {object} [options]
     * @return {RoiMap}
     */
    getMap(options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        this._assertLayerWithLabel(opt.label);
        return this._layers[opt.label].roiMap;
    }

    /**
     * Return statistics about rows
     * @param {object} [options]
     * @return {object[]}
     */
    rowsInfo(options = {}) {
        return this.getMap(options).rowsInfo();
    }

    /**
     * Return statistics about columns
     * @param {object} [options]
     * @return {object[]}
     */
    colsInfo(options = {}) {
        return this.getMap(options).rowsInfo();
    }

    /**
     * Return the IDs of the Regions Of Interest (Roi) as an array of number
     * @param {object} [options]
     * @return {number[]}
     */
    getRoiIds(options = {}) {
        var rois = this.getRois(options);
        if (rois) {
            var ids = new Array(rois.length);
            for (var i = 0; i < rois.length; i++) {
                ids[i] = rois[i].id;
            }
            return ids;
        }
        throw new Error('ROIs not found');
    }

    /**
     * Allows to select ROI based on size, label and sign.
     * @param {object} [options={}]
     * @param {string} [options.label='default'] Label of the layer containing the ROI
     * @param {boolean} [options.positive=true] Select the positive region of interest
     * @param {boolean} [options.negative=true] Select he negative region of interest
     * @param {number} [options.minSurface=0]
     * @param {number} [options.maxSurface=Number.POSITIVE_INFINITY]
     * @param {number} [options.minWidth=0]
     * @param {number} [options.minHeight=Number.POSITIVE_INFINITY]
     * @param {number} [options.maxWidth=0]
     * @param {number} [options.maxHeight=Number.POSITIVE_INFINITY]
     * @param {number} [options.minRatio=0] Ratio width / height
     * @param {number} [options.maxRatio=Number.POSITIVE_INFINITY]
     * @return {Roi[]}
     */
    getRois(options = {}) {
        var _options$label = options.label,
            label = _options$label === undefined ? this._options.label : _options$label,
            _options$positive = options.positive,
            positive = _options$positive === undefined ? true : _options$positive,
            _options$negative = options.negative,
            negative = _options$negative === undefined ? true : _options$negative,
            _options$minSurface = options.minSurface,
            minSurface = _options$minSurface === undefined ? 0 : _options$minSurface,
            _options$maxSurface = options.maxSurface,
            maxSurface = _options$maxSurface === undefined ? Number.POSITIVE_INFINITY : _options$maxSurface,
            _options$minWidth = options.minWidth,
            minWidth = _options$minWidth === undefined ? 0 : _options$minWidth,
            _options$maxWidth = options.maxWidth,
            maxWidth = _options$maxWidth === undefined ? Number.POSITIVE_INFINITY : _options$maxWidth,
            _options$minHeight = options.minHeight,
            minHeight = _options$minHeight === undefined ? 0 : _options$minHeight,
            _options$maxHeight = options.maxHeight,
            maxHeight = _options$maxHeight === undefined ? Number.POSITIVE_INFINITY : _options$maxHeight,
            _options$minRatio = options.minRatio,
            minRatio = _options$minRatio === undefined ? 0 : _options$minRatio,
            _options$maxRatio = options.maxRatio,
            maxRatio = _options$maxRatio === undefined ? Number.POSITIVE_INFINITY : _options$maxRatio;


        if (!this._layers[label]) {
            throw new Error('getRoi: This Roi layer (' + label + ') does not exists.');
        }

        var allRois = this._layers[label].roi;

        // todo Is this old way to change the array size still faster ?
        var rois = new Array(allRois.length);
        var ptr = 0;
        for (var i = 0; i < allRois.length; i++) {
            var roi = allRois[i];
            if ((roi.id < 0 && negative || roi.id > 0 && positive) && roi.surface >= minSurface && roi.surface <= maxSurface && roi.width >= minWidth && roi.width <= maxWidth && roi.height >= minHeight && roi.height <= maxHeight && roi.ratio >= minRatio && roi.ratio <= maxRatio) {
                rois[ptr++] = roi;
            }
        }
        rois.length = ptr;
        return rois;
    }

    /**
     * Returns an array of masks
     * See @links Roi.getMask for the options
     * @param {object} [options]
     * @return {Image[]} Retuns an array of masks (1 bit Image)
     */
    getMasks(options = {}) {
        var rois = this.getRois(options);

        var masks = new Array(rois.length);
        for (var i = 0; i < rois.length; i++) {
            masks[i] = rois[i].getMask(options);
        }
        return masks;
    }

    /**
     *
     * @param {object} [options]
     * @return {number[]}
     */
    getData(options = {}) {
        var opt = (0, _extend2.default)({}, this._options, options);
        this._assertLayerWithLabel(opt.label);
        return this._layers[opt.label].roiMap.data;
    }

    /**
     * Paint the ROI on a copy of the image adn return this image.
     * For painting options @links Image.paintMasks
     * For ROI selection options @links RoiManager.getMasks
     * @param {object} [options] - all the options to select ROIs
     * @param {string} [options.labelProperty] - Paint a mask property on the image.
     *                                  May be any property of the ROI like
     *                                  for example id, surface, width, height, meanX, meanY.
     * @return {Image} - The painted RGBA 8 bits image
     */
    paint(options = {}) {
        var labelProperty = options.labelProperty;

        if (!this._painted) {
            this._painted = this._image.rgba8();
        }
        var masks = this.getMasks(options);

        if (labelProperty) {
            var rois = this.getRois(options);
            options.labels = rois.map(roi => roi[labelProperty]);
            options.labelsPosition = rois.map(roi => [roi.meanX, roi.meanY]);
        }

        this._painted.paintMasks(masks, options);
        return this._painted;
    }

    // return a mask corresponding to all the selected masks
    getMask(options = {}) {
        var mask = new _Image2.default(this._image.width, this._image.height, { kind: 'BINARY' });
        var masks = this.getMasks(options);

        for (var i = 0; i < masks.length; i++) {
            var roi = masks[i];
            // we need to find the parent image to calculate the relative position

            for (var x = 0; x < roi.width; x++) {
                for (var y = 0; y < roi.height; y++) {
                    if (roi.getBitXY(x, y)) {
                        mask.setBitXY(x + roi.position[0], y + roi.position[1]);
                    }
                }
            }
        }
        return mask;
    }

    /**
     * Reset the changes to the current painted iamge to the image that was
     * used during the creation of the RoiManager except if a new image is
     * specified as parameter;
     * @param {object} [options]
     * @param {Image} [options.image] A new iamge that you would like to sue for painting over
     */
    resetPainted(options = {}) {
        var image = options.image;

        if (image) {
            this._painted = this.image.rgba8();
        } else {
            this._painted = this._image.rgba8();
        }
    }

    /**
     * In place modification of the roiMap that joins regions of interest
     * @param {object} [options]
     * @param {string|function(object,number,number)} [options.algorithm='commonBorderLength'] algorithm used to decide which ROIs are merged.
     *      Current implemented algorithms are 'commonBorderLength' that use the parameters
     *      'minCommonBorderLength' and 'maxCommonBorderLength' as well as 'commonBorderRatio' that uses
     *      the parameters 'minCommonBorderRatio' and 'maxCommonBorderRatio'.
     * @param {number} [options.minCommonBorderLength=5] minimal common number of pixels for merging
     * @param {number} [options.maxCommonBorderLength=100] maximal common number of pixels for merging
     * @param {number} [options.minCommonBorderRatio=0.3] minimal common border ratio for merging
     * @param {number} [options.maxCommonBorderRatio=1] maximal common border ratio for merging
     * @return {this}
     */
    mergeRoi(options = {}) {
        var roiMap = this.getMap(options);
        roiMap.mergeRoi(options);
        this.putMap(roiMap.data, options);
        return this;
    }

    /**
     * Finds all corresponding ROIs for all ROIs in the manager
     * @param {number[]} roiMap
     * @param {object} [options]
     * @return {Array} array of objects returned in correspondingRoisInformation
     */
    findCorrespondingRoi(roiMap, options = {}) {
        var allRois = this.getRois(options);
        var allRelated = [];
        for (var i = 0; i < allRois.length; i++) {
            var currentRoi = allRois[i];
            var x = currentRoi.minX;
            var y = currentRoi.minY;
            var allPoints = currentRoi.points;
            var roiSign = Math.sign(currentRoi.id);
            var currentRelated = correspondingRoisInformation(x, y, allPoints, roiMap, roiSign);
            allRelated.push(currentRelated);
        }
        return allRelated;
    }

    _assertLayerWithLabel(label) {
        if (!this._layers[label]) {
            throw new Error(`no layer with label ${label}`);
        }
    }

}

exports.default = RoiManager; /**
                               * For a given ROI, find corresponding ROIs and properties in given ROIMap.
                               * Returns an object containing the ID of ROIs, the surface shared by given and corresponding ROIs,
                               * the percentage of given ROI surface covered by the corresponding ROI, the number of points with same and opposite signs,
                               * the total number of points (same and opposite).
                               * @param {number} x - minX value of ROI
                               * @param {number} y - minY value of ROI
                               * @param {Array<Array<number>>} points - points of ROI
                               * @param {Array<number>} roiMap - roiMap from which we get the corresponding ROI
                               * @param {number} roiSign - sign of ROI
                               * @return {object} {{id: Array, surface: Array, roiSurfaceCovered: Array, same: number, opposite: number, total: number}}
                               * @private
                               */

function correspondingRoisInformation(x, y, points, roiMap, roiSign) {
    var correspondingRois = { id: [], surface: [], roiSurfaceCovered: [], same: 0, opposite: 0, total: 0 };
    for (var i = 0; i < points.length; i++) {
        var currentPoint = points[i];
        var currentX = currentPoint[0];
        var currentY = currentPoint[1];
        var correspondingRoiMapIndex = currentX + x + (currentY + y) * roiMap.width;
        var value = roiMap.data[correspondingRoiMapIndex];

        if (value > 0 || value < 0) {
            if (correspondingRois.id.includes(value)) {
                correspondingRois.surface[correspondingRois.id.indexOf(value)] += 1;
            } else {
                correspondingRois.id.push(value);
                correspondingRois.surface.push(1);
            }
        }
    }

    for (var _i = 0; _i < correspondingRois.id.length; _i++) {
        var currentSign = Math.sign(correspondingRois.id[_i]);
        if (currentSign === roiSign) {
            correspondingRois.same += correspondingRois.surface[_i];
        } else {
            correspondingRois.opposite += correspondingRois.surface[_i];
        }
        correspondingRois.roiSurfaceCovered[_i] = correspondingRois.surface[_i] / points.length;
    }
    correspondingRois.total = correspondingRois.opposite + correspondingRois.same;

    return correspondingRois;
}